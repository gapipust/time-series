library(xts)
Sys.setlocale("LC_ALL", "English") # to have labels (months) on graphs in English
df_website <- read.csv("daily-website-visitors.csv")
head(df_website)
df_website$Returning.Visits <- as.numeric(gsub(",", ".", gsub("\\.", "", df_website$Returning.Visits)))
df_website$Page.Loads <- as.numeric(gsub(",", ".", gsub("\\.", "", df_website$Page.Loads)))
df_website$Date <- as.Date(df_website$Date,format = "%m/%d/%Y")
# time series object
ts_website <- xts(df_website$Returning.Visits, df_website$Date)
plot(ts_website)
ts_website <- xts(df_website$Page.Loads, df_website$Date)
plot(ts_website)
# time series object
ts_website <- xts(df_website$Returning.Visits, df_website$Date)
plot(ts_website)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date")
plot(ts_website_weekly)
# aggregation to weekly time series
ts_website_weekly <- apply.weekly(ts_website, mean)
plot(ts_website_weekly)
# aggregation to monthly time series
ts_website_monthly <- apply.monthly(ts_website, mean)
plot(ts_website_monthly)
summary(ts_website)
acf(ts_website, main = "ACF of Daily Page Loads")
pacf(ts_website, main = "PACF of Daily Page Loads")
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website, end = cutoff_date)
test_data <- window(ts_website, start = cutoff_date + 1)
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
lines(test_data, col = "red")
legend("topright", legend = c("Training", "Test"), col = c("blue", "red"), lty = 1)
plot(test_data, col = "red")
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
lines(test_data, col = "red")
plot(ts_website)
plot( main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
lines(test_data, col = "red")
lines(test_data, col = "red",xlim = range(index(ts_website)))
legend("topright", legend = c("Training", "Test"), col = c("blue", "red"), lty = 1)
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
lines(test_data, col = "red",xlim = range(index(ts_website)))
legend("topright", legend = c("Training", "Test"), col = c("blue", "red"), lty = 1)
# Check for stationarity
adf.test(train_data)
library(forecast)
library(tseries)
library(ggplot2)
library(dplyr)
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
lines(test_data, col = "red")
legend("topright", legend = c("Training", "Test"), col = c("blue", "red"), lty = 1)
# Check for stationarity
adf.test(train_data)
diff_data <- diff(train_data)
plot(diff_data, main = "Differenced Data", ylab = "Page Loads")
acf(diff_data, main = "ACF of Differenced Data")
pacf(diff_data, main = "PACF of Differenced Data")
diff_data
diff_data <- diff(train_data,1)
plot(diff_data, main = "Differenced Data", ylab = "Page Loads")
acf(diff_data, main = "ACF of Differenced Data")
anyNA(df_website)
anyNA(diff_data)
which(is.na(diff_data$Page.Loads))
which(is.na(diff_data))
acf(diff_data,na.action = na.pass, main = "ACF of Differenced Data")
pacf(diff_data, na.action = na.pass, main = "PACF of Differenced Data")
# Fit candidate ARIMA models
auto_model <- auto.arima(train_data, seasonal = TRUE)
summary(auto_model)
# Diagnostic checking
checkresiduals(auto_model)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "English")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(forecast)
library(xts)
library(forecast)
library(tseries)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(xts)
library(forecast)
library(tseries)
library(ggplot2)
library(dplyr)
library(gridExtra)
df_website <- read.csv("daily-website-visitors.csv")
head(df_website)
df_website$Page.Loads <- as.numeric(gsub(",", ".", gsub("\\.", "", df_website$Page.Loads)))
df_website$Date <- as.Date(df_website$Date,format = "%m/%d/%Y")
ts_website <- xts(df_website$Page.Loads, df_website$Date)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date")
acf(ts_website, main = "ACF of Daily Page Loads")
pacf(ts_website, main = "PACF of Daily Page Loads")
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=0.5)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=0.7)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=2)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1.5)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1)
df_website$Page.Loads <- as.numeric(gsub(",", ".", gsub("\\.", "", df_website$Page.Loads)))
df_website$Date <- as.Date(df_website$Date,format = "%m/%d/%Y")
ts_website <- xts(df_website$Page.Loads, df_website$Date)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1)
acf(ts_website, main = "ACF of Daily Page Loads")
pacf(ts_website, main = "PACF of Daily Page Loads")
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website, end = cutoff_date)
test_data <- window(ts_website, start = cutoff_date + 1)
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
lines(test_data, col = "red")
legend("topright", legend = c("Training", "Test"), col = c("blue", "red"), lty = 1)
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website, end = cutoff_date)
test_data <- window(ts_website, start = cutoff_date + 1)
df_website <- read.csv("daily-website-visitors.csv")
df_website$Page.Loads <- as.numeric(gsub(",", ".", gsub("\\.", "", df_website$Page.Loads)))
df_website$Date <- as.Date(df_website$Date,format = "%m/%d/%Y")
head(df_website)
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website, end = cutoff_date)
test_data <- window(ts_website, start = cutoff_date + 1)
ts_website <- xts(df_website$Page.Loads, df_website$Date)
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website, end = cutoff_date)
test_data <- window(ts_website, start = cutoff_date + 1)
plot(train_data, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1)
acf(train_data, main = "ACF of Daily Page Loads")
pacf(train_data, main = "PACF of Daily Page Loads")
ts_website <- xts(df_website$Page.Loads, df_website$Date)
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website, end = cutoff_date)
test_data <- window(ts_website, start = cutoff_date + 1)
plot(train_data, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1.2)
acf(train_data, main = "ACF of Daily Page Loads")
pacf(train_data, main = "PACF of Daily Page Loads")
par(mfrow = c(1, 3))
lambda = BoxCox.lambda(train_data)
plot(milk.train, main = expression(test_data), ylab="")
par(mfrow = c(1, 3))
lambda = BoxCox.lambda(train_data)
plot(train_data, main = expression(test_data), ylab="")
plot(log(train_data), main = expression(log(test_data)), ylab = "")
plot(BoxCox(train_data,lambda), main = expression(BoxCox(test_data)), ylab = "")
nsdiffs(train_set)
nsdiffs(train_data)
?nsdiffs
train_data
ggseasonplot(train_data, main = "Seasonal Plot of Train Data")
# Weekly Aggregation
ts_website_weekly <- apply.weekly(ts_website, mean)
plot(ts_website_weekly, main = "Weekly Average Page Loads", ylab = "Page Loads", xlab = "Date")
# Monthly Aggregation
ts_website_monthly <- apply.monthly(ts_website, mean)
plot(ts_website_monthly, main = "Monthly Average Page Loads", ylab = "Page Loads", xlab = "Date")
ts_website_monthly
ts_website_weekly
plot(diff_data, main = "Differenced Data", ylab = "Page Loads")
plot(diff_data, main = "Differenced Data", ylab = "Page Loads",lwd=1.5)
plot(diff_data, main = "Differenced Data", ylab = "Page Loads",lwd=1)
# analysis of weekly aggregated data
acf(ts_website_weekly, main = "ACF of Weekly Page Loads")
pacf(ts_website_weekly, main = "PACF of Weekly Page Loads")
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website_weekly, end = cutoff_date)
test_data <- window(ts_website_weekly, start = cutoff_date + 1)
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
lines(test_data, col = "red")
legend("topright", legend = c("Training", "Test"), col = c("blue", "red"), lty = 1)
# Check for stationarity
adf.test(train_data)
diff_data <- diff(train_data,1)
plot(diff_data, main = "Differenced Data", ylab = "Page Loads",lwd=1)
acf(diff_data,na.action = na.pass, main = "ACF of Differenced Data")
pacf(diff_data, na.action = na.pass, main = "PACF of Differenced Data")
#################
decomposed <- decompose(ts_data, type = "multiplicative") # or "additive"
#################
decomposed <- decompose(ts_website, type = "multiplicative") # or "additive"
#################
decomposed <- decompose(ts_website_weekly, type = "multiplicative") # or "additive"
#################
decomposed <- decompose(ts_website_monthly, type = "multiplicative") # or "additive"
spectrum(ts_website_monthly, main = "Spectral Analysis of Time Series")
spectrum(ts_website_weekly, main = "Spectral Analysis of Time Series")
spectrum(ts_website, main = "Spectral Analysis of Time Series")
smooth_data <- filter(ts_website, rep(1/7, 7), sides = 2)
#################
decomposed <- decompose(ts_website_monthly, type = "multiplicative") # or "additive"
#################
decomposed <- decompose(ts_website_monthly, type = "additive") # or "additive"
#################
decomposed <- decompose(ts_website, type = "multiplicative") # or "additive"
ts_website
df_website <- read.csv("daily-website-visitors.csv")
kable(head(df_website), caption="Sample data")
library(knitr)
kable(head(df_website), caption="Sample data")
?kable
kable(head(df_website), lable="Sample data")
kable(head(df_website), label="Sample data")
# detach(gridExtra)
```
detach(gridExtra)
detach('gridExtra')
unloadNamespace('gridExtra')
kable(head(df_website), caption="Table1: Sample data")
df_website <- read.csv("daily-website-visitors.csv")
df_website$Page.Loads <- as.numeric(gsub(",", ".", gsub("\\.", "", df_website$Page.Loads)))
df_website$Date <- as.Date(df_website$Date,format = "%m/%d/%Y")
kable(head(df_website), caption="Table1: Sample data")
ts_website <- xts(df_website$Page.Loads, df_website$Date)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1.2)
acf(ts_website, main = "ACF of Daily Page Loads")
pacf(ts_website, main = "PACF of Daily Page Loads")
ts_website <- xts(df_website$Page.Loads, df_website$Date)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1.2)
ts_website <- xts(df_website$Page.Loads, df_website$Date)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1.2)
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website, end = cutoff_date)
test_data <- window(ts_website, start = cutoff_date + 1)
plot(train_data, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1.2)
acf(ts_website, main = "ACF of Daily Page Loads")
pacf(ts_website, main = "PACF of Daily Page Loads")
astsa::acf2(ts_website,max.lag= 104)
acf(ts_website, main = "ACF of Daily Page Loads", max.lag=80)
acf(ts_website, main = "ACF of Daily Page Loads", max.lag=104)
astsa::acf2(ts_website,max.lag= 104)
astsa::acf2(ts_website_weekly,max.lag= 104)
ts_website_weekly <- apply.weekly(ts_website, mean)
plot(ts_website_weekly, main = "Weekly Average Page Loads", ylab = "Page Loads", xlab = "Date")
ts_website_weekly <- apply.weekly(ts_website, mean)
plot(ts_website_weekly, main = "Weekly Average Page Loads", ylab = "Page Loads", xlab = "Date")
ts_website_weekly <- apply.weekly(ts_website, mean)
plot(ts_website_weekly, main = "Weekly Average Page Loads", ylab = "Page Loads", xlab = "Date", lwd=1)
plot(ts_website_weekly, main = "Weekly Average Page Loads", ylab = "Page Loads", xlab = "Date")
acf(ts_website_weekly, main = "ACF of Daily Page Loads", max.lag=104)
pacf(ts_website_weekly, main = "PACF of Daily Page Loads")
astsa::acf2(ts_website_weekly,max.lag= 104)
astsa::acf2(ts_website,max.lag= 104)
astsa::acf2(ts_website,max.lag= 80)
?head
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
Sys.setlocale("LC_ALL", "English")
library(xts)
library(forecast)
library(tseries)
library(astsa)
library(ggplot2)
library(dplyr)
library(knitr)
library(zoo)
library(tsbox)
library(latex2exp)
library(lubridate)
library(scales)
df_website <- read.csv("daily-website-visitors.csv")
df_website$Page.Loads <- as.numeric(gsub(",", ".", gsub("\\.", "", df_website$Page.Loads)))
df_website$Date <- as.Date(df_website$Date,format = "%m/%d/%Y")
kable(head(df_website,n=4), caption="Table1: Sample data")
lag1.plot(ts_website,16)
ts_website <- xts(df_website$Page.Loads, df_website$Date)
lag1.plot(ts_website,16)
lag1.plot(ts_website,16,size=1)
lag1.plot(ts_website,16,size=0.1)
lag1.plot(ts_website,16,cex=0.8)
lag1.plot(ts_website,16,cex=0.7)
lag1.plot(ts_website,16,cex=0.1)
lag1.plot(ts_website,16,cex=0.5)
min(ts_website)
ts_website
df_website
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads",lwd=1.2)
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date")
plot(ts_website, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1.2)
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
# Training set: First 4.5 years, Test set: Last 6 months
cutoff_date <- as.Date("2020-02-19")
train_data <- window(ts_website, end = cutoff_date)
test_data <- window(ts_website, start = cutoff_date + 1)
plot(train_data, main = "Training and Test Data", col = "blue", xlim = range(index(ts_website)), ylab = "Page Loads")
plot(train_data, main = "Daily Page Loads", ylab = "Page Loads", xlab = "Date",lwd=1.2)
# Check the stationarity - I tried for the ARMA models but later I did with seasonality
adf.test(ts_website, alternative = "stationary")
acf2(ts_website,max.lag= 80)
dlm7.1 <- diff(diff(train_data,7),1)
plot(dlm7.1,lwd=1,main=expression(paste(Delta,Delta[7], "Page Loads train")))
invisible(acf2(dlm7.1,main=expression(paste(Delta,Delta[7], "Page Loads train"))))
